// Generated by CoffeeScript 1.8.0
(function() {
  var SALT_FACTOR, Schema, Score, bcrypt, hidden, mongoose, uniqueValidator, userSchema;

  mongoose = require('mongoose');

  Schema = mongoose.Schema;

  uniqueValidator = require('mongoose-unique-validator');

  hidden = require('mongoose-hidden')();

  bcrypt = require('bcrypt');

  SALT_FACTOR = 10;

  Score = require('./score');

  userSchema = new Schema({
    username: {
      type: String,
      unique: true,
      index: true,
      lowercase: true,
      required: 'Username is required'
    },
    email: {
      type: String,
      index: true,
      unique: true
    },
    password: {
      type: String,
      required: 'Password is required',
      hide: true
    },
    name: {
      first: {
        type: String,
        required: 'First name is required'
      },
      last: {
        type: String,
        required: 'Last name is required'
      }
    },
    scores: [
      {
        type: Schema.Types.ObjectId,
        ref: 'Score'
      }
    ]
  });

  userSchema.set('toJSON', {
    virtuals: true
  });

  userSchema.set('toObject', {
    virtuals: true
  });

  userSchema.plugin(uniqueValidator);

  userSchema.plugin(hidden);

  userSchema.pre('save', function(next) {
    if (!this.isModified('password')) {
      return next();
    }
    return bcrypt.hash(this.password, SALT_FACTOR, (function(_this) {
      return function(err, hash) {
        if (err) {
          return next(err);
        }
        _this.password = hash;
        return next();
      };
    })(this));
  });

  userSchema.methods.comparePassword = function(input, cb) {
    return bcrypt.compare(input, this.password, function(err, isValid) {
      if (err) {
        return cb(err);
      }
      return cb(null, isValid);
    });
  };

  userSchema.virtual('name.full').get(function() {
    return "" + this.name.first + " " + this.name.last;
  });

  userSchema.methods.getPersonalBest = function(cb) {
    return Score.find({
      _player: this._id
    }).sort('-score').limit(1).exec(function(err, scores) {
      if (err) {
        return cb(err);
      }
      return cb(null, scores[0]);
    });
  };

  userSchema.methods.getRank = function(cb) {
    return this.getPersonalBest(function(err, score) {
      if (err) {
        return cb(err);
      }
      return Score.distinct('_player', {
        score: {
          $gte: score.score
        }
      }).exec(function(err, scores) {
        if (err) {
          return cb(err);
        }
        return cb(null, scores.length);
      });
    });
  };

  module.exports = mongoose.model('User', userSchema);

}).call(this);
