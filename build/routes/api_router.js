// Generated by CoffeeScript 1.8.0
(function() {
  var BasicStrategy, Router, Score, User, authenticate, passport, router, verify;

  Router = require('express').Router;

  router = new Router;

  passport = require('passport');

  BasicStrategy = require('passport-http').BasicStrategy;

  User = require('../models/user');

  Score = require('../models/score');

  verify = function(username, password, next) {
    return User.findOne({
      username: username
    }, function(err, user) {
      if (err) {
        return next(err);
      }
      if (user == null) {
        return next(null, false);
      }
      return user.comparePassword(password, function(err, isValid) {
        if (err) {
          return next(err);
        }
        if (!isValid) {
          return next(null, false);
        }
        return next(null, user);
      });
    });
  };

  passport.use(new BasicStrategy(verify));

  authenticate = passport.authenticate('basic', {
    session: false
  });

  router.post('/register', function(req, res) {
    var user;
    user = new User(req.body);
    return user.save(function(err, user) {
      if (err) {
        return res.status(400).json(err);
      }
      return res.json(user);
    });
  });

  router.post('/authenticate', function(req, res) {
    return User.findOne({
      username: req.body.username
    }, function(err, user) {
      if (err) {
        return res.sendStatus(500);
      }
      if (!user) {
        return res.sendStatus(401);
      }
      return user.comparePassword(req.body.password, function(err, isValid) {
        if (err != null) {
          return res.status(500).json({
            error: "There was an error logging in."
          });
        }
        if (isValid == null) {
          return res.status(401).json({
            error: "Invalid username or password."
          });
        }
        return res.json(user);
      });
    });
  });

  router.post('/scores', authenticate, function(req, res) {
    var score;
    score = new Score(req.body);
    score._player = req.user._id;
    return score.save(function(err) {
      if (err != null) {
        return res.sendStatus(500);
      }
      return User.find().count(function(err, totalPlayers) {
        return req.user.getRank(function(err, rank) {
          if (err != null) {
            return res.sendStatus(500);
          }
          return res.json({
            rank: rank,
            total_players: totalPlayers
          });
        });
      });
    });
  });

  router.get('/scores/top', authenticate, function(req, res) {
    return Score.find().populate('_player', 'name username').sort('-score').limit(10).exec(function(err, scores) {
      if (err) {
        return res.sendStatus(500);
      }
      return res.json(scores);
    });
  });

  router.get('/scores/personal_best', authenticate, function(req, res) {
    return req.user.getPersonalBest(function(err, score) {
      if (err) {
        return res.json(err);
      }
      if (!score) {
        return res.sendStatus(200);
      }
      return res.json(score);
    });
  });

  router.get('/rank', authenticate, function(req, res) {
    return req.user.getRank(function(err, rank) {
      if (err) {
        return res.sendStatus(500);
      }
      return res.json({
        rank: rank
      });
    });
  });

  module.exports = router;

}).call(this);
